pipeline {
    agent any
    stages {
        stage("Build") {
            steps {
                echo "Building the project..."
                sh 'mvn clean package'  // Assumes a Maven project
            }
            post {
                always {
                    mail to: "chermod2011@gmail.com",
                    subject: "Build Status Email",
                    body: "Build completed with status: ${currentBuild.result}",
                    attachLog: true
                }
            }
        }
        stage("Unit and Integration Tests") {
            steps {
                echo "Running Unit and Integration Tests..."
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    mail to: "chermod2011@gmail.com",
                    subject: "Test Status Email",
                    body: "Tests completed with status: ${currentBuild.result}",
                    attachLog: true
                }
            }
        }
        stage("Code Analysis") {
            steps {
                echo "Performing Code Analysis with SonarQube..."
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
        stage("Security Scan") {
            steps {
                echo "Running Security Scan with OWASP Dependency Check..."
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
            post {
                always {
                    mail to: "chermod2011@gmail.com",
                    subject: "Security Scan Status",
                    body: "Security scan completed with status: ${currentBuild.result}",
                    attachLog: true
                }
            }
        }
        stage("Deploy to Staging") {
            steps {
                echo "Deploying to Staging Server..."
                sh 'scp -i /path/to/key.pem target/your-app.jar ec2-user@<staging-ec2-ip>:/path/to/deploy/'
            }
        }
        stage("Integration Tests on Staging") {
            steps {
                echo "Running Integration Tests on Staging..."
                sh 'ssh -i /path/to/key.pem ec2-user@<staging-ec2-ip> "cd /path/to/app && ./run-integration-tests.sh"'
            }
        }
        stage("Deploy to Production") {
            steps {
                echo "Deploying to Production Server..."
                sh 'scp -i /path/to/key.pem target/your-app.jar ec2-user@<prod-ec2-ip>:/path/to/deploy/'
            }
        }
    }
}
